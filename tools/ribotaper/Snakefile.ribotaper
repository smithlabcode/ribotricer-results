import os
import errno

RIBOCODE_SCRIPT = '/home/cmb-panasas2/skchoudh/github_projects/ribotricer-results/tools/ribotaper/generate_ribocode_pvalue.py'
GENERATE_ROC_SCRIPT = '/home/cmb-panasas2/skchoudh/github_projects/ribotricer-results/tools/ribotaper/generate_ROC_input.py'
ROCR_SCRIPT = '/home/cmb-panasas2/skchoudh/github_projects/ribotricer-results/tools/ribotaper/ROC.R'
FSCORE_SCRIPT = '/home/cmb-panasas2/skchoudh/github_projects/ribotricer-results/tools/ribotaper/fscore.R'

def mkdir_p(path):
    """Python version mkdir -p
    Parameters
    ----------
    path : string
           Path to directory to create
    """
    if path:
        try:
            os.makedirs(path)
        except OSError as exc:  # Python >2.5
            if exc.errno == errno.EEXIST and os.path.isdir(path):
                pass
            else:
                raise


include:
    config['config_path']

mkdir_p(os.path.join(OUT_DIR, 'slurm-logs'))
workdir: OUT_DIR
rule all:
  input:
    'ribotricer_results/'+ SRP +'_results.txt',
    'ribocode_results/'+ SRP +'.txt',
    'ROC_output/' + SRP + '_fscore.txt',
    'ROC_output/' + SRP + '_auc.txt',

"""
rule run_ribotaper:
  input:
    rna = ancient(RAWDATA_DIR + '/bams_unique/' + RNA_SAMPLE + '.bam'),
    ribo = ancient(RAWDATA_DIR + '/bams_unique/' + RIBO_SAMPLE + '.bam')
  threads: 16
  params:
    prefix = OUT_DIR + '/' + 'ribotaper_results'
  output:
    psites = 'ribotaper_results/data_tracks/P_sites_all_tracks_ccds',
    centered_rna = 'ribotaper_results/data_tracks/Centered_RNA_tracks_ccds',
  shell:
    r'''cd {params.prefix} && bash {RIBOTAPER_SH} {input.ribo} {input.rna} {RIBOTAPER_ANNOTATION} {READ_LENGTHS} {PSITE_OFFSETS} {threads}'''

"""
rule generate_ribocode_pvalue:
  input:
    psites = ancient('ribotaper_results/data_tracks/P_sites_all_tracks_ccds'),
    centered_rna = ancient('ribotaper_results/data_tracks/Centered_RNA_tracks_ccds'),
    frame_file = ancient(RIBOTAPER_ANNOTATION + '/frames_ccds')
  output: 'ribocode_results/' + SRP +'.txt'
  shell:
    r'''python {RIBOCODE_SCRIPT} --psite {input.psites} --centered_rna {input.centered_rna} --frame {input.frame_file} --out {output}'''


rule generate_ribotricer_score:
  input:
    psites = ancient('ribotaper_results/data_tracks/P_sites_all_tracks_ccds'),
    centered_rna = ancient('ribotaper_results/data_tracks/Centered_RNA_tracks_ccds'),
    frame_file = ancient(RIBOTAPER_ANNOTATION + '/frames_ccds')
  output: 'ribotricer_results/' + SRP + '_results.txt'
  params:
    prefix = 'ribotricer_results/' + SRP
  shell:
    r'''ribotricer benchmark --rna {input.centered_rna} --ribo {input.psites} --prefix {params.prefix}'''

rule generate_ROC_input:
  input:
    ribotaper_result='ribotaper_results/results_ccds',
    ribocode_result='ribocode_results/' + SRP +'.txt',
    ribotricer_result='ribotricer_results/' + SRP +'_results.txt',
  output: 'ROC_input/' + SRP + '.txt'
  shell:
    r'''python {GENERATE_ROC_SCRIPT} --ribotaper_result {input.ribotaper_result} --ribocode_result {input.ribocode_result} --ribotricer_result {input.ribotricer_result} --out {output}'''


rule calc_ROC:
  input: 'ROC_input/' + SRP + '.txt'
  output:
    auc = 'ROC_output/' + SRP + '_auc.txt',
    pdf = 'ROC_output/' + SRP + '_roc_auc.pdf'
  shell:
    r'''Rscript {ROCR_SCRIPT} {input} {output.pdf} {output.auc}'''

rule calc_fscore:
  input: 'ROC_input/' + SRP + '.txt'
  output: 'ROC_output/' + SRP + '_fscore.txt'
  shell:
    r'''Rscript {FSCORE_SCRIPT} {input} {output}'''

