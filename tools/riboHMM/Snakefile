include: config['config_path']


import os
import errno

def mkdir_p(path):
  """Python version mkdir -p

  Parameters
  ----------

  path : str
  """
  if path:
    try:
      os.makedirs(path) 
    except OSError as exc:  # Python >2.5
      if exc.errno == errno.EEXIST and os.path.isdir(path):
        pass
      else:
        raise


def get_wrapper(wrapper_name):
  path = os.path.dirname(os.path.abspath(os.path.realpath(workflow.snakefile)))
  return 'file://' + os.path.join(path, 'wrappers',  wrapper_name + '.py')

mkdir_p(os.path.join(OUT_DIR, 'slurm-logs'))
RIBOHMM_SRC_DIR = '/home/cmb-panasas2/skchoudh/github_projects/riboHMM_upstream/'
workdir: OUT_DIR

SAMPLE_TYPES = ['RIBO', 'RNA']
CONDAENV = 'ribohmm_py2'

rule all:
  input:
    INPUT_DIR + '/RNA_CCDS_lengths.gz.tbi',
    expand(INPUT_DIR + '/RIBO_CCDS_lengths_rev.{read_length}.gz.tbi', read_length=READ_LENGTHS),
    expand(SYNFOOTPRINTS_PREFIX + '_mappability_{read_length}.gz.tbi', read_length=READ_LENGTHS),
    'riboHMM_out/learn_model.txt'


rule bam_to_tbi_ribo:
  input: INPUT_DIR + '/RIBO_CCDS_lengths.bam'
  output: 
    fwd = expand(OUT_DIR + '/RIBO_CCDS_lengths_fwd.{read_length}.gz.tbi', read_length=READ_LENGTHS),
    rev = expand(OUT_DIR + '/RIBO_CCDS_lengths_rev.{read_length}.gz.tbi', read_length=READ_LENGTHS)
  benchmark: 'benchmarks/riboHMM_benchmark/bam_to_tbi/RIBO.txt'
  shell:
    r'''source activate {CONDAENV} && python {RIBOHMM_SRC_DIR}/bam_to_tbi.py --dtype riboseq {input}'''
      
      
rule bam_to_tbi_rna:
  input: OUT_DIR + '/RNA_CCDS_lengths.bam'
  output: OUT_DIR + '/RNA_CCDS_lengths.gz.tbi'
  benchmark: 'benchmarks/riboHMM_benchmark/bam_to_tbi/RNA.txt'
  shell:
    r'''python {RIBOHMM_SRC_DIR}/bam_to_tbi.py --dtype rnaseq {input}'''
      

rule create_syn_footprints:
  input:
    gtf = ancient(GTF),
    fasta = ancient(GENOME_FASTA),
  output: SYNFOOTPRINTS_PREFIX + '_{read_length}.fq.gz'
  benchmark: 'benchmarks/riboHMM_benchmark/create_syn_footprints/{read_length}.txt'
  params:
    read_length= '{read_length}'
  shell:
    r'''source activate {CONDAENV} && python {RIBOHMM_SRC_DIR}/construct_synthetic_footprints.py --footprint_length {params.read_length} --output_fastq_prefix {SYNFOOTPRINTS_PREFIX} {input.gtf} {input.fasta}'''


rule map_star:
  input:
    R1 = SYNFOOTPRINTS_PREFIX+'_{read_length}.fq.gz',
    index = ancient(STAR_INDEX)
  output:
    bam = SYNFOOTPRINTS_PREFIX + '_{read_length}.bam',
    txbam = SYNFOOTPRINTS_PREFIX + '_{read_length}.tx.bam',
    counts = SYNFOOTPRINTS_PREFIX + '_{read_length}.genecounts.tsv',
    starlogs = SYNFOOTPRINTS_PREFIX + '_{read_length}Log.final.out'
  params:
    chrom_sizes = CHROM_SIZES,
    intron_bed = INTRON_BED,
    tmp_dir = '/tmp'
  threads: 16
  benchmark: 'benchmarks/riboHMM_benchmark/map_star/{read_length}.txt'
  wrapper:
    get_wrapper('star_wrapper')


rule compute_mappability:
  input: SYNFOOTPRINTS_PREFIX + '_{read_length}.bam',
  output: SYNFOOTPRINTS_PREFIX + '_mappability_{read_length}.gz.tbi'
  params:
    prefix = SYNFOOTPRINTS_PREFIX + '_mappability_{read_length}'
  benchmark: 'benchmarks/riboHMM_benchmark/compute_mappability/{read_length}.txt'
  shell:
    r'''source actiate {CONDAENV} && python {RIBOHMM_SRC_DIR}/compute_mappability.py {input} {params.prefix}'''


rule learn_model:
  input:
    rna_tbi = OUT_DIR + '/RNA_CCDS_lengths.gz.tbi',
    ribo_tbi = expand(OUT_DIR + '/' + SAMPLE_TYPES[0] + '_CCDS_lengths_fwd.{read_length}.gz.tbi', read_length=READ_LENGTHS),
    gtf = GTF,
    fasta = GENOME_FASTA,
    mappability_file = expand(SYNFOOTPRINTS_PREFIX + '_mappability_{read_length}.gz.tbi', read_length=READ_LENGTHS)
  params:
    rna_prefix = OUT_DIR + '/RNA_CCDS_lengths',
    ribo_prefix = OUT_DIR + '/RIBO_CCDS_lengths',
    mappability_prefix = SYNFOOTPRINTS_PREFIX + '_mappability'
  output: 
    model = 'riboHMM_out/learn_model.txt',
    log = 'riboHMM_out/log.txt'
  benchmark: 'benchmarks/riboHMM_benchmark/learn_model/{read_length}.txt'
  shell:
    r'''source activate {CONDAENV} && python {RIBOHMM_SRC_DIR}/learn_model.py --rnaseq_file {params.rna_prefix} --mappability_file {params.mappability_prefix} --log_file {output.log} --model_file {output.model} {input.fasta} {input.gtf} {params.ribo_prefix}'''
